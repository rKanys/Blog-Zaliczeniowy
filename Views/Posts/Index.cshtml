@model IEnumerable<Blog_Zaliczeniowy.Models.Post>
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager

@{
	ViewData["Title"] = "PostoPedia";
	// Załóżmy, że przekazujesz aktualny numer strony i łączną liczbę stron do widoku:
}



<div class="blog-container">
	<h1 class="page-title">Strona główna PostoPedii</h1>

	@if (User.Identity.IsAuthenticated)
	{
		<p>
			<a asp-action="Create" class="action-btn">+ Dodaj nowy post</a>
		</p>
	}

	@foreach (var item in Model)
	{
		<div class="post-card">
			<!-- Tytuł posta, klikalny do szczegółów -->
			<table style="width: 100%;">
				<tr>
					<th>
						<a asp-action="Details" asp-route-id="@item.Id" class="post-title">
							@item.Title
						</a>
					</th>
					@if (UserManager.GetUserId(User) == item.UserId || User.IsInRole("Administrator"))
					{
						<th style="text-align: right">

							<div class="post-actions">
								<a asp-action="Edit" asp-route-id="@item.Id" class="action-btn">Edytuj</a>
								<a asp-action="Delete" asp-route-id="@item.Id" class="action-btn action-delete">Usuń</a>
							</div>
						</th>
					}
				</tr>
			</table>


			<!-- Autor i data publikacji -->
			<div class="post-meta">
				Autor: @item.User?.Nickname
				| Data publikacji: @item.CreatedAt.ToString("dd MMM yyyy, HH:mm")
			</div>

			<!-- Treść posta -->
			@if (item.Content != null && item.Content.Length > 500)
			{
				<!-- Tylko fragment + fade-out + link "Czytaj dalej" -->
				<div class="post-content content-fade">
					@item.Content.Substring(0, 700)
				</div>
				<a asp-action="Details" asp-route-id="@item.Id" class="read-more">Czytaj dalej...</a>
			}
			else
			{
				<!-- Cała treść, jeśli krótsza niż 500 znaków -->
				<div class="post-content">
					@item.Content
				</div>
			}

			<!-- Edycja / Usuwanie (tylko autor lub admin) -->

		</div>
	}

	<!-- PAGINACJA (prosty szablon; zaimplementuj w kontrolerze) -->
	@{
		int currentPage = ViewBag.CurrentPage ?? 1;
		int totalPages = ViewBag.TotalPages ?? 1;
		int range = 3;

		Func<int> handleLimits = () => Math.Min(Math.Max(1, totalPages - 2 * range), Math.Max(1, currentPage - range));

		IList<int> pages = Enumerable
		.Range(handleLimits(), range * 2 + 1)
		.TakeWhile(p => p <= totalPages)
		.ToList();
	}
	<div class="MyPagination">

		<a asp-action="Index" asp-route-strona="1">Pierwsza</a>
		@if (currentPage <= 1)
		{

			<a asp-action="Index" id="lastPage" asp-route-strona="@(currentPage)">Poprzednia</a>
		}
		else
		{
			<a asp-action="Index" id="lastPage" asp-route-strona="@(currentPage - 1)">Poprzednia</a>
		}
		@foreach (int page in pages)
		{
			<a asp-action="Index" asp-route-strona="@(page)" class="@(page == currentPage ? "active" : "")">@(page)</a>
		}

		@if (currentPage == totalPages)
		{

			<a asp-action="Index" id="lastPage" asp-route-strona="@(currentPage)">Następna</a>
		}
		else
		{
			<a asp-action="Index" id="lastPage" asp-route-strona="@(currentPage + 1)">Następna</a>
		}
		<a asp-action="Index" asp-route-strona="@totalPages">Ostatnia</a>

	</div>
	@* @class="@(currentPage == totalPages ? "disabled" : "") *@
</div>